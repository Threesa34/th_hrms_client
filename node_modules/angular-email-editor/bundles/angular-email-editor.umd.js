(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('angular-email-editor', ['exports', '@angular/core'], factory) :
    (factory((global['angular-email-editor'] = {}),global.ng.core));
}(this, (function (exports,i0) { 'use strict';

    var EmailEditorService = /** @class */ (function () {
        function EmailEditorService() {
        }
        EmailEditorService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        EmailEditorService.ctorParameters = function () { return []; };
        EmailEditorService.ngInjectableDef = i0.defineInjectable({ factory: function EmailEditorService_Factory() { return new EmailEditorService(); }, token: EmailEditorService, providedIn: "root" });
        return EmailEditorService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var scriptUrl = '//editor.unlayer.com/embed.js?2';
    var callbacks = [];
    var loaded = false;
    var isScriptInjected = function () {
        var scripts = document.querySelectorAll('script');
        var injected = false;
        scripts.forEach(function (script) {
            if (script.src.includes(scriptUrl)) {
                injected = true;
            }
        });
        return injected;
    };
    var addCallback = function (callback) {
        callbacks.push(callback);
    };
    var runCallbacks = function () {
        if (loaded) {
            var callback = void 0;
            while ((callback = callbacks.shift())) {
                callback();
            }
        }
    };
    var loadScript = function (callback) {
        addCallback(callback);
        if (!isScriptInjected()) {
            var embedScript = document.createElement('script');
            embedScript.setAttribute('src', scriptUrl);
            embedScript.onload = function () {
                loaded = true;
                runCallbacks();
            };
            document.head.appendChild(embedScript);
        }
        else {
            runCallbacks();
        }
    };

    var name = "angular-email-editor";
    var version = "0.7.1";
    var peerDependencies = {
        "@angular/common": "^7.0.0",
        "@angular/core": "^7.0.0"
    };
    var pkg = {
        name: name,
        version: version,
        peerDependencies: peerDependencies
    };

    var lastEditorId = 0;
    var EmailEditorComponent = /** @class */ (function () {
        function EmailEditorComponent() {
            this.options = {};
            this.minHeight = '500px';
            this.loaded = new i0.EventEmitter();
            this.editorId = "editor-" + ++lastEditorId;
        }
        EmailEditorComponent.prototype.ngOnInit = function () { };
        EmailEditorComponent.prototype.ngAfterViewInit = function () {
            loadScript(this.loadEditor.bind(this));
        };
        EmailEditorComponent.prototype.loadEditor = function () {
            var options = this.options || {};
            if (this.projectId) {
                options.projectId = this.projectId;
            }
            if (this.tools) {
                options.tools = this.tools;
            }
            if (this.appearance) {
                options.appearance = this.appearance;
            }
            if (this.locale) {
                options.locale = this.locale;
            }
            this.editor = unlayer.createEditor(__assign({}, options, { id: this.editorId, displayMode: 'email', source: {
                    name: pkg.name,
                    version: pkg.version,
                } }));
            this.loaded.emit({});
        };
        EmailEditorComponent.prototype.loadDesign = function (data) {
            this.editor.loadDesign(data);
        };
        EmailEditorComponent.prototype.saveDesign = function (cb) {
            this.editor.saveDesign(cb);
        };
        EmailEditorComponent.prototype.exportHtml = function (cb) {
            this.editor.exportHtml(cb);
        };
        EmailEditorComponent.decorators = [
            { type: i0.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'email-editor',
                        template: "<div [id]=\"editorId\" class=\"unlayer-editor\" [style.min-height]=\"minHeight\"></div>",
                        styles: [":host{flex:1;display:flex}.unlayer-editor{flex:1;display:flex}"]
                    }] }
        ];
        /** @nocollapse */
        EmailEditorComponent.ctorParameters = function () { return []; };
        EmailEditorComponent.propDecorators = {
            editorId: [{ type: i0.Input }],
            options: [{ type: i0.Input }],
            projectId: [{ type: i0.Input }],
            tools: [{ type: i0.Input }],
            appearance: [{ type: i0.Input }],
            locale: [{ type: i0.Input }],
            minHeight: [{ type: i0.Input }],
            loaded: [{ type: i0.Output }]
        };
        return EmailEditorComponent;
    }());

    var EmailEditorModule = /** @class */ (function () {
        function EmailEditorModule() {
        }
        EmailEditorModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [EmailEditorComponent],
                        imports: [],
                        exports: [EmailEditorComponent]
                    },] }
        ];
        return EmailEditorModule;
    }());

    /*
     * Public API Surface of email-editor
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.EmailEditorService = EmailEditorService;
    exports.EmailEditorComponent = EmailEditorComponent;
    exports.EmailEditorModule = EmailEditorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,