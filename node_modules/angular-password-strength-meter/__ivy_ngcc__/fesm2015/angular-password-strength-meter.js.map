{"version":3,"file":"angular-password-strength-meter.js","sources":["ng:/angular-password-strength-meter/lib/password-strength-meter.service.ts","ng:/angular-password-strength-meter/lib/password-strength-meter.component.ts","ng:/angular-password-strength-meter/lib/password-strength-meter.module.ts","ng:/angular-password-strength-meter/public-api.ts","ng:/angular-password-strength-meter/angular-password-strength-meter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport * as zxcvbn_ from 'zxcvbn';\n\nconst zxcvbn = zxcvbn_;\n\n@Injectable()\nexport class PasswordStrengthMeterService {\n  constructor() {}\n\n  /**\n   *  this will return the password strength score in number\n   *  0 - too guessable\n   *  1 - very guessable\n   *  2 - somewhat guessable\n   *  3 - safely unguessable\n   *  4 - very unguessable\n   *\n   *  @param password - Password\n   */\n  score(password): number {\n    const result = zxcvbn(password);\n    return result.score;\n  }\n\n  /**\n   * this will return the password strength score with feedback messages\n   * return type { score: number; feedback: { suggestions: string[]; warning: string } }\n   *\n   * @param password - Password\n   */\n  scoreWithFeedback(password): { score: number; feedback: { suggestions: string[]; warning: string } } {\n    const result = zxcvbn(password);\n    return { score: result.score, feedback: result.feedback };\n  }\n}\n","import {\n  Component,\n  OnInit,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\nimport { PasswordStrengthMeterService } from './password-strength-meter.service';\n\n@Component({\n  selector: 'password-strength-meter',\n  templateUrl: './password-strength-meter.component.html',\n  styleUrls: ['./password-strength-meter.component.scss'],\n  providers: [PasswordStrengthMeterService]\n})\nexport class PasswordStrengthMeterComponent implements OnInit, OnChanges {\n  @Input() password: string;\n\n  @Input() minPasswordLength = 8;\n\n  @Input() enableFeedback = false;\n\n  @Input() colors: string[] = [];\n\n  @Output() strengthChange = new EventEmitter<number>();\n\n  passwordStrength: number = null;\n\n  feedback: { suggestions: string[]; warning: string } = null;\n\n  private prevPasswordStrength = null;\n\n  private defaultColours = [\n    'darkred',\n    'orangered',\n    'orange',\n    'yellowgreen',\n    'green'\n  ];\n\n  constructor(\n    private passwordStrengthMeterService: PasswordStrengthMeterService\n  ) {}\n\n  ngOnInit() {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.password) {\n      this.calculatePasswordStrength();\n    }\n  }\n\n  private calculatePasswordStrength() {\n    // TODO validation logic optimization\n    if (!this.password) {\n      this.passwordStrength = null;\n    } else if (this.password && this.password.length < this.minPasswordLength) {\n      this.passwordStrength = 0;\n    } else {\n      if (this.enableFeedback) {\n        const result = this.passwordStrengthMeterService.scoreWithFeedback(\n          this.password\n        );\n        this.passwordStrength = result.score;\n        this.feedback = result.feedback;\n      } else {\n        this.passwordStrength = this.passwordStrengthMeterService.score(\n          this.password\n        );\n        this.feedback = null;\n      }\n    }\n\n    // Only emit the passwordStrength if it changed\n    if (this.prevPasswordStrength !== this.passwordStrength) {\n      this.strengthChange.emit(this.passwordStrength);\n      this.prevPasswordStrength = this.passwordStrength;\n    }\n  }\n\n  getMeterFillColor(strength) {\n    if (!strength || strength < 0 || strength > 5) {\n      return this.colors[0] ? this.colors[0] : this.defaultColours[0];\n    }\n\n    return this.colors[strength]\n      ? this.colors[strength]\n      : this.defaultColours[strength];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PasswordStrengthMeterComponent } from './password-strength-meter.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PasswordStrengthMeterComponent],\n  exports: [PasswordStrengthMeterComponent]\n})\nexport class PasswordStrengthMeterModule {}\n","/*\n * Public API Surface of password-strength-meter\n */\n\nexport * from './lib/password-strength-meter.service';\nexport * from './lib/password-strength-meter.component';\nexport * from './lib/password-strength-meter.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}