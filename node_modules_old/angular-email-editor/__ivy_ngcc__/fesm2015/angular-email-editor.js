import { Injectable, Component, Input, Output, EventEmitter, NgModule, defineInjectable } from '@angular/core';

import * as ɵngcc0 from '@angular/core';
class EmailEditorService {
    constructor() { }
}
EmailEditorService.ɵfac = function EmailEditorService_Factory(t) { return new (t || EmailEditorService)(); };
EmailEditorService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: EmailEditorService, factory: EmailEditorService.ɵfac, providedIn: 'root' });
/** @nocollapse */
EmailEditorService.ctorParameters = () => [];
EmailEditorService.ngInjectableDef = defineInjectable({ factory: function EmailEditorService_Factory() { return new EmailEditorService(); }, token: EmailEditorService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EmailEditorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

const scriptUrl = '//editor.unlayer.com/embed.js?2';
const callbacks = [];
let loaded = false;
const isScriptInjected = () => {
    const scripts = document.querySelectorAll('script');
    let injected = false;
    scripts.forEach((script) => {
        if (script.src.includes(scriptUrl)) {
            injected = true;
        }
    });
    return injected;
};
const addCallback = (callback) => {
    callbacks.push(callback);
};
const runCallbacks = () => {
    if (loaded) {
        let callback;
        while ((callback = callbacks.shift())) {
            callback();
        }
    }
};
const loadScript = (callback) => {
    addCallback(callback);
    if (!isScriptInjected()) {
        const embedScript = document.createElement('script');
        embedScript.setAttribute('src', scriptUrl);
        embedScript.onload = () => {
            loaded = true;
            runCallbacks();
        };
        document.head.appendChild(embedScript);
    }
    else {
        runCallbacks();
    }
};

var name = "angular-email-editor";
var version = "0.7.1";
var peerDependencies = {
	"@angular/common": "^7.0.0",
	"@angular/core": "^7.0.0"
};
var pkg = {
	name: name,
	version: version,
	peerDependencies: peerDependencies
};

let lastEditorId = 0;
class EmailEditorComponent {
    constructor() {
        this.options = {};
        this.minHeight = '500px';
        this.loaded = new EventEmitter();
        this.editorId = `editor-${++lastEditorId}`;
    }
    ngOnInit() { }
    ngAfterViewInit() {
        loadScript(this.loadEditor.bind(this));
    }
    loadEditor() {
        const options = this.options || {};
        if (this.projectId) {
            options.projectId = this.projectId;
        }
        if (this.tools) {
            options.tools = this.tools;
        }
        if (this.appearance) {
            options.appearance = this.appearance;
        }
        if (this.locale) {
            options.locale = this.locale;
        }
        this.editor = unlayer.createEditor(Object.assign({}, options, { id: this.editorId, displayMode: 'email', source: {
                name: pkg.name,
                version: pkg.version,
            } }));
        this.loaded.emit({});
    }
    loadDesign(data) {
        this.editor.loadDesign(data);
    }
    saveDesign(cb) {
        this.editor.saveDesign(cb);
    }
    exportHtml(cb) {
        this.editor.exportHtml(cb);
    }
}
EmailEditorComponent.ɵfac = function EmailEditorComponent_Factory(t) { return new (t || EmailEditorComponent)(); };
EmailEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EmailEditorComponent, selectors: [["email-editor"]], inputs: { options: "options", minHeight: "minHeight", editorId: "editorId", projectId: "projectId", tools: "tools", appearance: "appearance", locale: "locale" }, outputs: { loaded: "loaded" }, decls: 1, vars: 3, consts: [[1, "unlayer-editor", 3, "id"]], template: function EmailEditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("min-height", ctx.minHeight);
        ɵngcc0.ɵɵproperty("id", ctx.editorId);
    } }, styles: ["[_nghost-%COMP%]{flex:1;display:flex}.unlayer-editor[_ngcontent-%COMP%]{flex:1;display:flex}"] });
/** @nocollapse */
EmailEditorComponent.ctorParameters = () => [];
EmailEditorComponent.propDecorators = {
    editorId: [{ type: Input }],
    options: [{ type: Input }],
    projectId: [{ type: Input }],
    tools: [{ type: Input }],
    appearance: [{ type: Input }],
    locale: [{ type: Input }],
    minHeight: [{ type: Input }],
    loaded: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EmailEditorComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: 'email-editor',
                template: "<div [id]=\"editorId\" class=\"unlayer-editor\" [style.min-height]=\"minHeight\"></div>",
                styles: [":host{flex:1;display:flex}.unlayer-editor{flex:1;display:flex}"]
            }]
    }], function () { return []; }, { options: [{
            type: Input
        }], minHeight: [{
            type: Input
        }], loaded: [{
            type: Output
        }], editorId: [{
            type: Input
        }], projectId: [{
            type: Input
        }], tools: [{
            type: Input
        }], appearance: [{
            type: Input
        }], locale: [{
            type: Input
        }] }); })();

class EmailEditorModule {
}
EmailEditorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: EmailEditorModule });
EmailEditorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function EmailEditorModule_Factory(t) { return new (t || EmailEditorModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(EmailEditorModule, { declarations: [EmailEditorComponent], exports: [EmailEditorComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EmailEditorModule, [{
        type: NgModule,
        args: [{
                declarations: [EmailEditorComponent],
                imports: [],
                exports: [EmailEditorComponent]
            }]
    }], null, null); })();

/*
 * Public API Surface of email-editor
 */

/**
 * Generated bundle index. Do not edit.
 */

export { EmailEditorService, EmailEditorComponent, EmailEditorModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,