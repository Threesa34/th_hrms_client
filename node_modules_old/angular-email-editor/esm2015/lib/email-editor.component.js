import { Component, Input, Output, EventEmitter } from '@angular/core';
import { loadScript } from './loadScript';
import pkg from './source.json';
let lastEditorId = 0;
export class EmailEditorComponent {
    constructor() {
        this.options = {};
        this.minHeight = '500px';
        this.loaded = new EventEmitter();
        this.editorId = `editor-${++lastEditorId}`;
    }
    ngOnInit() { }
    ngAfterViewInit() {
        loadScript(this.loadEditor.bind(this));
    }
    loadEditor() {
        const options = this.options || {};
        if (this.projectId) {
            options.projectId = this.projectId;
        }
        if (this.tools) {
            options.tools = this.tools;
        }
        if (this.appearance) {
            options.appearance = this.appearance;
        }
        if (this.locale) {
            options.locale = this.locale;
        }
        this.editor = unlayer.createEditor(Object.assign({}, options, { id: this.editorId, displayMode: 'email', source: {
                name: pkg.name,
                version: pkg.version,
            } }));
        this.loaded.emit({});
    }
    loadDesign(data) {
        this.editor.loadDesign(data);
    }
    saveDesign(cb) {
        this.editor.saveDesign(cb);
    }
    exportHtml(cb) {
        this.editor.exportHtml(cb);
    }
}
EmailEditorComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'email-editor',
                template: "<div [id]=\"editorId\" class=\"unlayer-editor\" [style.min-height]=\"minHeight\"></div>",
                styles: [":host{flex:1;display:flex}.unlayer-editor{flex:1;display:flex}"]
            }] }
];
/** @nocollapse */
EmailEditorComponent.ctorParameters = () => [];
EmailEditorComponent.propDecorators = {
    editorId: [{ type: Input }],
    options: [{ type: Input }],
    projectId: [{ type: Input }],
    tools: [{ type: Input }],
    appearance: [{ type: Input }],
    locale: [{ type: Input }],
    minHeight: [{ type: Input }],
    loaded: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwtZWRpdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItZW1haWwtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2VtYWlsLWVkaXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBeUIsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMxQyxPQUFPLEdBQUcsTUFBTSxlQUFlLENBQUM7QUFpQmhDLElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQztBQVFyQixNQUFNLE9BQU8sb0JBQW9CO0lBZS9CO1FBWlMsWUFBTyxHQUFtQixFQUFFLENBQUM7UUFNN0IsY0FBUyxHQUFHLE9BQU8sQ0FBQztRQUVuQixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUtwQyxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsRUFBRSxZQUFZLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRUYsUUFBUSxLQUFJLENBQUM7SUFFYixlQUFlO1FBQ2IsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVTLFVBQVU7UUFDbEIsTUFBTSxPQUFPLEdBQW1CLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1FBRW5ELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDcEM7UUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDNUI7UUFFRCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1NBQ3RDO1FBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQzlCO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsWUFBWSxtQkFDN0IsT0FBTyxJQUNWLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUNqQixXQUFXLEVBQUUsT0FBTyxFQUNwQixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO2dCQUNkLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTzthQUNyQixJQUNELENBQUM7UUFFSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0sVUFBVSxDQUFDLElBQVk7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVNLFVBQVUsQ0FBQyxFQUEwQjtRQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU0sVUFBVSxDQUFDLEVBQTBCO1FBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLENBQUM7OztZQXpFRixTQUFTLFNBQUM7Z0JBQ1QsOENBQThDO2dCQUM5QyxRQUFRLEVBQUUsY0FBYztnQkFDeEIsbUdBQTRDOzthQUU3Qzs7Ozs7dUJBR0UsS0FBSztzQkFDTCxLQUFLO3dCQUNMLEtBQUs7b0JBQ0wsS0FBSzt5QkFDTCxLQUFLO3FCQUNMLEtBQUs7d0JBRUwsS0FBSztxQkFFTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIEFmdGVyVmlld0luaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbG9hZFNjcmlwdCB9IGZyb20gJy4vbG9hZFNjcmlwdCc7XG5pbXBvcnQgcGtnIGZyb20gJy4vc291cmNlLmpzb24nO1xuXG5kZWNsYXJlIG1vZHVsZSB1bmxheWVyIHtcbiAgZnVuY3Rpb24gaW5pdChvYmplY3QpO1xuICBmdW5jdGlvbiBjcmVhdGVFZGl0b3Iob2JqZWN0KTtcbiAgZnVuY3Rpb24gbG9hZERlc2lnbihvYmplY3QpO1xuICBmdW5jdGlvbiBzYXZlRGVzaWduKEZ1bmN0aW9uKTtcbiAgZnVuY3Rpb24gZXhwb3J0SHRtbChGdW5jdGlvbik7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW5sYXllck9wdGlvbnMge1xuICBwcm9qZWN0SWQ/OiBudW1iZXI7XG4gIHRvb2xzPzogb2JqZWN0O1xuICBhcHBlYXJhbmNlPzogb2JqZWN0O1xuICBsb2NhbGU/OiBzdHJpbmc7XG59XG5cbmxldCBsYXN0RWRpdG9ySWQgPSAwO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ2VtYWlsLWVkaXRvcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9lbWFpbC1lZGl0b3IuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9lbWFpbC1lZGl0b3IuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIEVtYWlsRWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcblxuICBASW5wdXQoKSBlZGl0b3JJZDogc3RyaW5nO1xuICBASW5wdXQoKSBvcHRpb25zOiBVbmxheWVyT3B0aW9ucyA9IHt9O1xuICBASW5wdXQoKSBwcm9qZWN0SWQ6IG51bWJlcjtcbiAgQElucHV0KCkgdG9vbHM6IG9iamVjdDtcbiAgQElucHV0KCkgYXBwZWFyYW5jZTogb2JqZWN0O1xuICBASW5wdXQoKSBsb2NhbGU6IHN0cmluZztcblxuICBASW5wdXQoKSBtaW5IZWlnaHQgPSAnNTAwcHgnO1xuXG4gIEBPdXRwdXQoKSBsb2FkZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgZWRpdG9yOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5lZGl0b3JJZCA9IGBlZGl0b3ItJHsrK2xhc3RFZGl0b3JJZH1gO1xuICAgfVxuXG4gIG5nT25Jbml0KCkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgbG9hZFNjcmlwdCh0aGlzLmxvYWRFZGl0b3IuYmluZCh0aGlzKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgbG9hZEVkaXRvcigpIHtcbiAgICBjb25zdCBvcHRpb25zOiBVbmxheWVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucyB8fCB7fTtcblxuICAgIGlmICh0aGlzLnByb2plY3RJZCkge1xuICAgICAgb3B0aW9ucy5wcm9qZWN0SWQgPSB0aGlzLnByb2plY3RJZDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50b29scykge1xuICAgICAgb3B0aW9ucy50b29scyA9IHRoaXMudG9vbHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXBwZWFyYW5jZSkge1xuICAgICAgb3B0aW9ucy5hcHBlYXJhbmNlID0gdGhpcy5hcHBlYXJhbmNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxvY2FsZSkge1xuICAgICAgb3B0aW9ucy5sb2NhbGUgPSB0aGlzLmxvY2FsZTtcbiAgICB9XG5cbiAgICB0aGlzLmVkaXRvciA9IHVubGF5ZXIuY3JlYXRlRWRpdG9yKHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBpZDogdGhpcy5lZGl0b3JJZCxcbiAgICAgIGRpc3BsYXlNb2RlOiAnZW1haWwnLFxuICAgICAgc291cmNlOiB7XG4gICAgICAgIG5hbWU6IHBrZy5uYW1lLFxuICAgICAgICB2ZXJzaW9uOiBwa2cudmVyc2lvbixcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLmxvYWRlZC5lbWl0KHt9KTtcbiAgfVxuXG4gIHB1YmxpYyBsb2FkRGVzaWduKGRhdGE6IG9iamVjdCkge1xuICAgIHRoaXMuZWRpdG9yLmxvYWREZXNpZ24oZGF0YSk7XG4gIH1cblxuICBwdWJsaWMgc2F2ZURlc2lnbihjYjogKGRhdGE6IG9iamVjdCkgPT4gdm9pZCkge1xuICAgIHRoaXMuZWRpdG9yLnNhdmVEZXNpZ24oY2IpO1xuICB9XG5cbiAgcHVibGljIGV4cG9ydEh0bWwoY2I6IChkYXRhOiBvYmplY3QpID0+IHZvaWQpIHtcbiAgICB0aGlzLmVkaXRvci5leHBvcnRIdG1sKGNiKTtcbiAgfVxuXG59XG4iXX0=