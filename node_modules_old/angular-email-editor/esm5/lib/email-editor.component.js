import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { loadScript } from './loadScript';
import pkg from './source.json';
var lastEditorId = 0;
var EmailEditorComponent = /** @class */ (function () {
    function EmailEditorComponent() {
        this.options = {};
        this.minHeight = '500px';
        this.loaded = new EventEmitter();
        this.editorId = "editor-" + ++lastEditorId;
    }
    EmailEditorComponent.prototype.ngOnInit = function () { };
    EmailEditorComponent.prototype.ngAfterViewInit = function () {
        loadScript(this.loadEditor.bind(this));
    };
    EmailEditorComponent.prototype.loadEditor = function () {
        var options = this.options || {};
        if (this.projectId) {
            options.projectId = this.projectId;
        }
        if (this.tools) {
            options.tools = this.tools;
        }
        if (this.appearance) {
            options.appearance = this.appearance;
        }
        if (this.locale) {
            options.locale = this.locale;
        }
        this.editor = unlayer.createEditor(tslib_1.__assign({}, options, { id: this.editorId, displayMode: 'email', source: {
                name: pkg.name,
                version: pkg.version,
            } }));
        this.loaded.emit({});
    };
    EmailEditorComponent.prototype.loadDesign = function (data) {
        this.editor.loadDesign(data);
    };
    EmailEditorComponent.prototype.saveDesign = function (cb) {
        this.editor.saveDesign(cb);
    };
    EmailEditorComponent.prototype.exportHtml = function (cb) {
        this.editor.exportHtml(cb);
    };
    EmailEditorComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'email-editor',
                    template: "<div [id]=\"editorId\" class=\"unlayer-editor\" [style.min-height]=\"minHeight\"></div>",
                    styles: [":host{flex:1;display:flex}.unlayer-editor{flex:1;display:flex}"]
                }] }
    ];
    /** @nocollapse */
    EmailEditorComponent.ctorParameters = function () { return []; };
    EmailEditorComponent.propDecorators = {
        editorId: [{ type: Input }],
        options: [{ type: Input }],
        projectId: [{ type: Input }],
        tools: [{ type: Input }],
        appearance: [{ type: Input }],
        locale: [{ type: Input }],
        minHeight: [{ type: Input }],
        loaded: [{ type: Output }]
    };
    return EmailEditorComponent;
}());
export { EmailEditorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwtZWRpdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItZW1haWwtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2VtYWlsLWVkaXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQXlCLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxHQUFHLE1BQU0sZUFBZSxDQUFDO0FBaUJoQyxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7QUFFckI7SUFxQkU7UUFaUyxZQUFPLEdBQW1CLEVBQUUsQ0FBQztRQU03QixjQUFTLEdBQUcsT0FBTyxDQUFDO1FBRW5CLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBS3BDLElBQUksQ0FBQyxRQUFRLEdBQUcsWUFBVSxFQUFFLFlBQWMsQ0FBQztJQUM1QyxDQUFDO0lBRUYsdUNBQVEsR0FBUixjQUFZLENBQUM7SUFFYiw4Q0FBZSxHQUFmO1FBQ0UsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVTLHlDQUFVLEdBQXBCO1FBQ0UsSUFBTSxPQUFPLEdBQW1CLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1FBRW5ELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDcEM7UUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDNUI7UUFFRCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1NBQ3RDO1FBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQzlCO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsWUFBWSxzQkFDN0IsT0FBTyxJQUNWLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUNqQixXQUFXLEVBQUUsT0FBTyxFQUNwQixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO2dCQUNkLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTzthQUNyQixJQUNELENBQUM7UUFFSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0seUNBQVUsR0FBakIsVUFBa0IsSUFBWTtRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRU0seUNBQVUsR0FBakIsVUFBa0IsRUFBMEI7UUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVNLHlDQUFVLEdBQWpCLFVBQWtCLEVBQTBCO1FBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLENBQUM7O2dCQXpFRixTQUFTLFNBQUM7b0JBQ1QsOENBQThDO29CQUM5QyxRQUFRLEVBQUUsY0FBYztvQkFDeEIsbUdBQTRDOztpQkFFN0M7Ozs7OzJCQUdFLEtBQUs7MEJBQ0wsS0FBSzs0QkFDTCxLQUFLO3dCQUNMLEtBQUs7NkJBQ0wsS0FBSzt5QkFDTCxLQUFLOzRCQUVMLEtBQUs7eUJBRUwsTUFBTTs7SUEwRFQsMkJBQUM7Q0FBQSxBQTNFRCxJQTJFQztTQXJFWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBsb2FkU2NyaXB0IH0gZnJvbSAnLi9sb2FkU2NyaXB0JztcbmltcG9ydCBwa2cgZnJvbSAnLi9zb3VyY2UuanNvbic7XG5cbmRlY2xhcmUgbW9kdWxlIHVubGF5ZXIge1xuICBmdW5jdGlvbiBpbml0KG9iamVjdCk7XG4gIGZ1bmN0aW9uIGNyZWF0ZUVkaXRvcihvYmplY3QpO1xuICBmdW5jdGlvbiBsb2FkRGVzaWduKG9iamVjdCk7XG4gIGZ1bmN0aW9uIHNhdmVEZXNpZ24oRnVuY3Rpb24pO1xuICBmdW5jdGlvbiBleHBvcnRIdG1sKEZ1bmN0aW9uKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVbmxheWVyT3B0aW9ucyB7XG4gIHByb2plY3RJZD86IG51bWJlcjtcbiAgdG9vbHM/OiBvYmplY3Q7XG4gIGFwcGVhcmFuY2U/OiBvYmplY3Q7XG4gIGxvY2FsZT86IHN0cmluZztcbn1cblxubGV0IGxhc3RFZGl0b3JJZCA9IDA7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnZW1haWwtZWRpdG9yJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2VtYWlsLWVkaXRvci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2VtYWlsLWVkaXRvci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgRW1haWxFZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuXG4gIEBJbnB1dCgpIGVkaXRvcklkOiBzdHJpbmc7XG4gIEBJbnB1dCgpIG9wdGlvbnM6IFVubGF5ZXJPcHRpb25zID0ge307XG4gIEBJbnB1dCgpIHByb2plY3RJZDogbnVtYmVyO1xuICBASW5wdXQoKSB0b29sczogb2JqZWN0O1xuICBASW5wdXQoKSBhcHBlYXJhbmNlOiBvYmplY3Q7XG4gIEBJbnB1dCgpIGxvY2FsZTogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIG1pbkhlaWdodCA9ICc1MDBweCc7XG5cbiAgQE91dHB1dCgpIGxvYWRlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBlZGl0b3I6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmVkaXRvcklkID0gYGVkaXRvci0keysrbGFzdEVkaXRvcklkfWA7XG4gICB9XG5cbiAgbmdPbkluaXQoKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBsb2FkU2NyaXB0KHRoaXMubG9hZEVkaXRvci5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBsb2FkRWRpdG9yKCkge1xuICAgIGNvbnN0IG9wdGlvbnM6IFVubGF5ZXJPcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKHRoaXMucHJvamVjdElkKSB7XG4gICAgICBvcHRpb25zLnByb2plY3RJZCA9IHRoaXMucHJvamVjdElkO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRvb2xzKSB7XG4gICAgICBvcHRpb25zLnRvb2xzID0gdGhpcy50b29scztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hcHBlYXJhbmNlKSB7XG4gICAgICBvcHRpb25zLmFwcGVhcmFuY2UgPSB0aGlzLmFwcGVhcmFuY2U7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubG9jYWxlKSB7XG4gICAgICBvcHRpb25zLmxvY2FsZSA9IHRoaXMubG9jYWxlO1xuICAgIH1cblxuICAgIHRoaXMuZWRpdG9yID0gdW5sYXllci5jcmVhdGVFZGl0b3Ioe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGlkOiB0aGlzLmVkaXRvcklkLFxuICAgICAgZGlzcGxheU1vZGU6ICdlbWFpbCcsXG4gICAgICBzb3VyY2U6IHtcbiAgICAgICAgbmFtZTogcGtnLm5hbWUsXG4gICAgICAgIHZlcnNpb246IHBrZy52ZXJzaW9uLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHRoaXMubG9hZGVkLmVtaXQoe30pO1xuICB9XG5cbiAgcHVibGljIGxvYWREZXNpZ24oZGF0YTogb2JqZWN0KSB7XG4gICAgdGhpcy5lZGl0b3IubG9hZERlc2lnbihkYXRhKTtcbiAgfVxuXG4gIHB1YmxpYyBzYXZlRGVzaWduKGNiOiAoZGF0YTogb2JqZWN0KSA9PiB2b2lkKSB7XG4gICAgdGhpcy5lZGl0b3Iuc2F2ZURlc2lnbihjYik7XG4gIH1cblxuICBwdWJsaWMgZXhwb3J0SHRtbChjYjogKGRhdGE6IG9iamVjdCkgPT4gdm9pZCkge1xuICAgIHRoaXMuZWRpdG9yLmV4cG9ydEh0bWwoY2IpO1xuICB9XG5cbn1cbiJdfQ==