import { Injectable, Component, Input, Output, EventEmitter, NgModule, defineInjectable } from '@angular/core';

class EmailEditorService {
    constructor() { }
}
EmailEditorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
EmailEditorService.ctorParameters = () => [];
EmailEditorService.ngInjectableDef = defineInjectable({ factory: function EmailEditorService_Factory() { return new EmailEditorService(); }, token: EmailEditorService, providedIn: "root" });

const scriptUrl = '//editor.unlayer.com/embed.js?2';
const callbacks = [];
let loaded = false;
const isScriptInjected = () => {
    const scripts = document.querySelectorAll('script');
    let injected = false;
    scripts.forEach((script) => {
        if (script.src.includes(scriptUrl)) {
            injected = true;
        }
    });
    return injected;
};
const addCallback = (callback) => {
    callbacks.push(callback);
};
const runCallbacks = () => {
    if (loaded) {
        let callback;
        while ((callback = callbacks.shift())) {
            callback();
        }
    }
};
const loadScript = (callback) => {
    addCallback(callback);
    if (!isScriptInjected()) {
        const embedScript = document.createElement('script');
        embedScript.setAttribute('src', scriptUrl);
        embedScript.onload = () => {
            loaded = true;
            runCallbacks();
        };
        document.head.appendChild(embedScript);
    }
    else {
        runCallbacks();
    }
};

var name = "angular-email-editor";
var version = "0.7.1";
var peerDependencies = {
	"@angular/common": "^7.0.0",
	"@angular/core": "^7.0.0"
};
var pkg = {
	name: name,
	version: version,
	peerDependencies: peerDependencies
};

let lastEditorId = 0;
class EmailEditorComponent {
    constructor() {
        this.options = {};
        this.minHeight = '500px';
        this.loaded = new EventEmitter();
        this.editorId = `editor-${++lastEditorId}`;
    }
    ngOnInit() { }
    ngAfterViewInit() {
        loadScript(this.loadEditor.bind(this));
    }
    loadEditor() {
        const options = this.options || {};
        if (this.projectId) {
            options.projectId = this.projectId;
        }
        if (this.tools) {
            options.tools = this.tools;
        }
        if (this.appearance) {
            options.appearance = this.appearance;
        }
        if (this.locale) {
            options.locale = this.locale;
        }
        this.editor = unlayer.createEditor(Object.assign({}, options, { id: this.editorId, displayMode: 'email', source: {
                name: pkg.name,
                version: pkg.version,
            } }));
        this.loaded.emit({});
    }
    loadDesign(data) {
        this.editor.loadDesign(data);
    }
    saveDesign(cb) {
        this.editor.saveDesign(cb);
    }
    exportHtml(cb) {
        this.editor.exportHtml(cb);
    }
}
EmailEditorComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'email-editor',
                template: "<div [id]=\"editorId\" class=\"unlayer-editor\" [style.min-height]=\"minHeight\"></div>",
                styles: [":host{flex:1;display:flex}.unlayer-editor{flex:1;display:flex}"]
            }] }
];
/** @nocollapse */
EmailEditorComponent.ctorParameters = () => [];
EmailEditorComponent.propDecorators = {
    editorId: [{ type: Input }],
    options: [{ type: Input }],
    projectId: [{ type: Input }],
    tools: [{ type: Input }],
    appearance: [{ type: Input }],
    locale: [{ type: Input }],
    minHeight: [{ type: Input }],
    loaded: [{ type: Output }]
};

class EmailEditorModule {
}
EmailEditorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [EmailEditorComponent],
                imports: [],
                exports: [EmailEditorComponent]
            },] }
];

/*
 * Public API Surface of email-editor
 */

/**
 * Generated bundle index. Do not edit.
 */

export { EmailEditorService, EmailEditorComponent, EmailEditorModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,